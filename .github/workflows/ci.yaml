name: Python application

on:
  push:
    branches: [ "master" ]
    paths-ignore:
        - 'README.md'  
  pull_request:
    branches: [ "master" ]
    paths-ignore:
        - 'README.md'  

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest  # Assuming you're running Docker on Ubuntu

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'  # You can also use a matrix strategy for multiple Python versions

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build and run Docker container
      run: |
        docker-compose -f ./FreeAPI/docker-compose.yml up --build --attach backend

    - name: Wait for the application to start
      run: sleep 10  # Adjust the sleep duration as needed for your application

    - name: Run Pytest in tests/unit directory
      run: pytest ./tests/unit

    - name: Shutdown Docker Compose services
      if: always()
      run: docker-compose -f ./FreeAPI/docker-compose.yml down

